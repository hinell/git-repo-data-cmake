# Title.......: GITRepoData
# Summary.....: Git abstraction for cmake
# Created.....: September 10, 2022
# Authors.....: Alex A. Davronov <al.neodim@gmail.com> (2022-)
# Repository..: TODO: [September 11, 2022] Add repo link
# Description.: See git-repo-data.md

include_guard(DIRECTORY)
include(CMakePrintHelpers)
find_package(Git QUIET REQUIRED)

cmake_minimum_required(VERSION "3.12.0")


if(GIT_FOUND)
endif()

# endif()

# GIT_COMMIT_*
#  git log -n1 --format='%H;%cn;%ce;%cs;%s;%b'

# GET COUNT
#  git rev-list --count $(VERSION_TAG)..HEAD


# Read N lines
# file(STRINGS test.txt OUTPUT LIMIT_COUNT 1)

# CONTINUE: [September 19, 2022] Fetch CMAKE_ROLE from top cmakelists


# @breif Creates a library target that predefines GIT information and that
# can be liked against. See Related .md for for all parameters
# @param[in]	- TODO: Add parameter description
# @param[out]	${GITREPO_TARGETNAME} - Return value
function(GITRepoData_Target TARGETNAME)

	get_property(CMAKE_ROLE GLOBAL PROPERTY CMAKE_ROLE)
	if("${CMAKE_ROLE}" STREQUAL SCRIPT)
		message(FATAL_ERROR "Calling GITRepoData_Target outside of project context")
	endif()

	# Lists of arguments to parse
	set(_OPTIONAL)
	set(_SINGLE			OUTPUT_PATH PREFIX LANG)
	set(_MULTI			SYMBOLS)
	cmake_parse_arguments(
		ARGS
		"${_OPTIONAL}"
		"${_SINGLE}"
		"${_MULTI}"
		${ARGN}
	)
	# Accessing passed variables
	# cmake_print_variables(ARGS_UNPARSED_ARGUM1ENTS)
	# cmake_print_variables(ARGS_KEYWORDS_MISSING_VALUES)

	# WARN if extra arguments are
	if(NOT "${ARGS_UNPARSED_ARGUMENTS}" STREQUAL "")
		message(WARNING "GITRepoData_Target: Extra args are passed, see usage")
		cmake_print_variables(ARGS_UNPARSED_ARGUMENTS)
	endif()

	# Set defaults
	#-------------------------------------
	if(NOT ARGS_LANG)
		set(ARGS_LANG CXX)
	endif()

	if(ARGS_LANG STREQUAL "CXX")
		set(ARGS_OUTPUT_PATH_SUFFIX ".hh")
	endif()

	if(NOT ARGS_OUTPUT_PATH)
		set(ARGS_OUTPUT_PATH "include/${TARGETNAME}.${ARGS_OUTPUT_PATH_SUFFIX}")
	endif()

	# Set up header file
	set(HEADERFILECONTENT "// This file was autogenerated by GitRepoData utility\n")
	string(APPEND HEADERFILECONTENT "#define ${ARGS_PREFIX}_HASH \"F1020F9ASFJ089\"\n\n" )

	# TODO: [September 20, 2022] Add version info
	if("VERSION" IN_LIST ARGS_SYMBOLS)
		string(APPEND HEADERFILECONTENT "#define ${ARGS_PREFIX}_VERSION \"1.0.0\"\n" )
		string(APPEND HEADERFILECONTENT "#define ${ARGS_PREFIX}_VERSION_MAJOR 1\n" )
		string(APPEND HEADERFILECONTENT "#define ${ARGS_PREFIX}_VERSION_MINOR 0\n" )
		string(APPEND HEADERFILECONTENT "#define ${ARGS_PREFIX}_VERSION_PATCH 0\n" )
		string(APPEND HEADERFILECONTENT "#define ${ARGS_PREFIX}_VERSION_TWEAK \".rc-9000\"\n" )
	endif()

	# Generated header file
	# and create a target linking to it
	#-------------------------------------
	file(WRITE "${ARGS_OUTPUT_PATH}" "${HEADERFILECONTENT}")
	add_library("${TARGETNAME}" INTERFACE "${ARGS_OUTPUT_PATH}")
	set_target_properties(
		${TARGETNAME}
		PROPERTIES
			# Current version
			VERSION "${PROJECT_VERSION}"
			# Compatibility version
			# SOVERSION TODO: [September 20, 2022] Add version from git
			# Use ccache
			CXX_COMPILER_LAUNCHER ccache
			C_COMPILER_LAUNCHER   ccache
			# This is only for compilable targets
			LINKER_LANGUAGE ${ARGS_LANG}
			# File generated by generate_export_header
			# Used for  MacOS FRAMEWORK or for install(TARGETS...)
			PUBLIC_HEADER $<$<PLATFORM_ID:Darwin>:"${ARGS_OUTPUT_PATH}">
			C_VISIBILITY_PRESET default
			#Hide inline functions
			VISIBILITY_INLINES_HIDDEN OFF
			# List of files to be installed with target
			#RESOURCE list;of;files
	)

	# Clean up all function variables
	foreach(ARGNAME IN LISTS _OPTIONAL _SINGLE _MULTI)
		unset(ARGS_${ARGNAME})
	endforeach()
	set(GITREPODATA_TARGETNAME ${TARGETNAME} PARENT_SCOPE)

endfunction()

#-------------------------------------------------------------gitrepodata_update
# TODO: [September 19, 2022] Finish off this function
function(GITRepoData_update)
	include(GitRepoData RESULT_VARIABLE GRD_SCRIPT_PATH)
	# Stub on gitrepodata_update()
	execute_process(
								COMMAND ${CMAKE_COMMAND} -P ${GRD_SCRIPT_PATH}
			WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
				RESULT_VARIABLE EXEC_EXIT_CODE
				ERROR_VARIABLE EXEC_ERROR
				OUTPUT_VARIABLE EXEC_OUTPUT

			OUTPUT_STRIP_TRAILING_WHITESPACE
			ERROR_STRIP_TRAILING_WHITESPACE
	)

	if(NOT EXEC_EXIT_CODE EQUAL 0)
			message(FATAL_ERROR "${EXEC_ERROR}")
			# set(OUTPUT "${EXEC_OUTPUT}")

	else()
			message("CMakeLists.txt--------------------------------------DEBUG")
			string(REPLACE "-- " "++" EXEC_OUTPUT "${EXEC_OUTPUT}")
			# cmake_print_variables(EXEC_OUTPUT)

			list(LENGTH EXEC_OUTPUT EXEC_OUTPUT_SIZE)
			cmake_print_variables(EXEC_OUTPUT)

			if(EXEC_OUTPUT_SIZE GREATER 1)

				list(GET EXEC_OUTPUT 0 MAJOR)
				list(GET EXEC_OUTPUT 1 MINOR)
				list(GET EXEC_OUTPUT 2 PATCH)
				include(CMakePrintHelpers)
				cmake_print_variables(MAJOR)
				cmake_print_variables(MINOR)
				cmake_print_variables(PATCH)
				cmake_print_variables(EXEC_OUTPUT)
			elseif()
				message(STATUS "Versions list is empty")

			endif()
			message("CMakeLists.txt--------------------------------------DEBUG")
	endif()
endfunction()
